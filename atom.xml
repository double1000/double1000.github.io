<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡温柔 | 瞎扯的地方</title>
  <subtitle>醉后不知天在水,满船清梦压星河</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://double1000.github.io/blog/"/>
  <updated>2017-04-06T08:05:18.440Z</updated>
  <id>https://double1000.github.io/blog/</id>
  
  <author>
    <name>胡温柔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web | 开发流程环节</title>
    <link href="https://double1000.github.io/blog/2017/04/06/web-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E7%8E%AF%E8%8A%82/"/>
    <id>https://double1000.github.io/blog/2017/04/06/web-开发流程环节/</id>
    <published>2017-04-06T07:30:17.000Z</published>
    <updated>2017-04-06T08:05:18.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" class="full-image"></p>
<h4 id="一-相关名词解释"><a href="#一-相关名词解释" class="headerlink" title="一.相关名词解释"></a>一.相关名词解释</h4><ol>
<li>运维工程师 （代码部署工程服务） OP</li>
<li>产品经理  PM （ProductManager) 对产品负责</li>
<li>MRD 产出 市场需求文档 对产品复杂分析</li>
<li>UI UserInterface 界面视觉设计</li>
<li>UE UserExperience 用户体验设计</li>
<li>技术经理 PM (PojectManager)</li>
<li>项目管理员,对项目负责</li>
<li>前端开发 FE - FrontEnd developer engineer</li>
<li>后端开发 RD</li>
<li>测试 QA</li>
</ol>
<h4 id="二-WEB开发流程"><a href="#二-WEB开发流程" class="headerlink" title="二.WEB开发流程"></a>二.WEB开发流程</h4><h5 id="2-1-需求确定"><a href="#2-1-需求确定" class="headerlink" title="2-1. 需求确定"></a>2-1. 需求确定</h5><h5 id="2-2-分析与设计"><a href="#2-2-分析与设计" class="headerlink" title="2-2. 分析与设计"></a>2-2. 分析与设计</h5><h6 id="2-2-1-架构分析与设计"><a href="#2-2-1-架构分析与设计" class="headerlink" title="2-2.1. 架构分析与设计"></a>2-2.1. 架构分析与设计</h6><h6 id="2-2-2-业务逻辑分析"><a href="#2-2-2-业务逻辑分析" class="headerlink" title="2-2.2. 业务逻辑分析"></a>2-2.2. 业务逻辑分析</h6><h6 id="2-2-3-业务逻辑设计"><a href="#2-2-3-业务逻辑设计" class="headerlink" title="2-2.3. 业务逻辑设计"></a>2-2.3. 业务逻辑设计</h6><h6 id="2-2-4-界面设计"><a href="#2-2-4-界面设计" class="headerlink" title="2-2.4. 界面设计"></a>2-2.4. 界面设计</h6><h5 id="2-3-开发环境搭建"><a href="#2-3-开发环境搭建" class="headerlink" title="2-3. 开发环境搭建"></a>2-3. 开发环境搭建</h5><h5 id="2-4-开发-测试-开发-测试"><a href="#2-4-开发-测试-开发-测试" class="headerlink" title="2-4. 开发-测试-开发-测试"></a>2-4. 开发-测试-开发-测试</h5><h5 id="2-5-文档编纂"><a href="#2-5-文档编纂" class="headerlink" title="2-5. 文档编纂"></a>2-5. 文档编纂</h5><h4 id="三-WEB开发环节"><a href="#三-WEB开发环节" class="headerlink" title="三.WEB开发环节"></a>三.WEB开发环节</h4><ul>
<li><p>开发前</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">产品功能设计</div><div class="line">视觉 最终效果 （ 产品经理）</div><div class="line">视觉/交互设计 交互 操作流程（美工）</div></pre></td></tr></table></figure>
</li>
<li><p>开发中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">技术规划</div><div class="line">考虑产品需求是否合理</div><div class="line">产品代码是否可以复用</div><div class="line">复杂项目是否可以拆分  （技术经理）</div></pre></td></tr></table></figure>
</li>
<li><p>开发后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">测试 （测试工程师QA 对网页代码进行 功能/性能测试）</div><div class="line">上线</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="四-WEB开发文档"><a href="#四-WEB开发文档" class="headerlink" title="四.WEB开发文档"></a>四.WEB开发文档</h4><h5 id="1-需求文档-MRD-描述项目功能需求"><a href="#1-需求文档-MRD-描述项目功能需求" class="headerlink" title="1.需求文档 MRD  描述项目功能需求"></a>1.需求文档 MRD  描述项目功能需求</h5><h5 id="2-项目开发文档-技术经理负责"><a href="#2-项目开发文档-技术经理负责" class="headerlink" title="2.项目开发文档 技术经理负责"></a>2.项目开发文档 技术经理负责</h5><ol>
<li>可行性确认</li>
<li>技术选型</li>
<li>开发/线上坏境规划</li>
<li>技术开发方案设计</li>
<li>团队协作方式</li>
</ol>
<blockquote class="blockquote-center">待更新……</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;1.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;一-相关名词解释&quot;&gt;&lt;a href=&quot;#一-相关名词解释&quot; class=&quot;headerlink&quot; title=&quot;一.相关名词解释&quot;&gt;&lt;/a&gt;一.相关名词解释&lt;/h4&gt;&lt;ol&gt;

    
    </summary>
    
      <category term="寄蜉蝣于天地,渺沧海之一粟" scheme="https://double1000.github.io/blog/categories/%E5%AF%84%E8%9C%89%E8%9D%A3%E4%BA%8E%E5%A4%A9%E5%9C%B0-%E6%B8%BA%E6%B2%A7%E6%B5%B7%E4%B9%8B%E4%B8%80%E7%B2%9F/"/>
    
    
      <category term="开发流程" scheme="https://double1000.github.io/blog/tags/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    
      <category term="WEB" scheme="https://double1000.github.io/blog/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes | JSON</title>
    <link href="https://double1000.github.io/blog/2017/04/06/javascript-notes-json/"/>
    <id>https://double1000.github.io/blog/2017/04/06/javascript-notes-json/</id>
    <published>2017-04-06T06:23:54.000Z</published>
    <updated>2017-04-06T06:30:12.797Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" class="full-image"></p>
<ul>
<li>json(javascript object notaion)全称是javascript对象表示法,它是一种数据交换的文本格式,而不是一种数据交换的文本格式,而不是一种编程语言,用于读取结构化数据,JSON是设计成描述数据交换格式的，他也有自己的语法，这个语法是JavaScript的一个子集。</li>
</ul>
<h5 id="一-语法规则"><a href="#一-语法规则" class="headerlink" title="一. 语法规则"></a>一. 语法规则</h5><ol>
<li>JSON的语法可以表示以下三种类型的值。字符串,数值,布尔值,和null</li>
<li>字符串必须使用双引号表示,不能使用单引号,数值必须使用十进制,且不能使用NaN和Infinity</li>
<li>JSON不支持javascript中的特殊值undefined<h5 id="二-JSON与对象-数组的区别"><a href="#二-JSON与对象-数组的区别" class="headerlink" title="二. JSON与对象,数组的区别"></a>二. JSON与对象,数组的区别</h5></li>
<li>对象和数组都是作为一种复杂数据类型,表示的是一组有序的键值对儿</li>
<li>对象的每个键值对儿中的值可以是简单值,也可以是复杂数据类型的值</li>
<li>数组表示一组有序的值的列表可以通过数值索引来访问其中的值,数组的值可以是任意类型 – 简单值,对象,或数组</li>
<li>注意:数组或对象最后一个成员的后面,不能加逗号.</li>
<li>JSON不支持JavaScript中的特殊值undefined</li>
<li>JSON没有变量的概念</li>
<li>JSON中,对象的键名必须放在双引号里面</li>
<li>因为JSON不是JavaScript语句,所以没有末尾的分号<h5 id="三-JSON对象stringify-方法"><a href="#三-JSON对象stringify-方法" class="headerlink" title="三.JSON对象stringify()方法"></a>三.JSON对象stringify()方法</h5><h6 id="3-1-JSON-stringify-把javascript对象序列化"><a href="#3-1-JSON-stringify-把javascript对象序列化" class="headerlink" title="3-1. JSON.stringify();把javascript对象序列化"></a>3-1. JSON.stringify();<code>把javascript对象序列化</code></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonobj = &#123;</div><div class="line">    <span class="string">"title"</span>:<span class="string">"javascript"</span>,</div><div class="line">    <span class="string">"group"</span>:&#123;</div><div class="line">        <span class="string">"name"</span>:<span class="string">"jia"</span>,</div><div class="line">        <span class="string">"tel"</span>:<span class="number">12345</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> jsonstringify = <span class="built_in">JSON</span>.stringify(jsonobj);</div><div class="line"><span class="comment">//&#123;"title":"javascript","group":&#123;"name":"jia","tel":12345&#125;&#125;</span></div><div class="line"></div><div class="line">如果对象的成员是<span class="literal">undefined</span>或函数，这个成员会被省略</div><div class="line">如果数组的成员是<span class="literal">undefined</span>或函数，则这些值被转成<span class="literal">null</span></div><div class="line"><span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">  <span class="attr">a</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">  <span class="attr">b</span>: <span class="literal">undefined</span>,</div><div class="line">  <span class="attr">c</span>: [ <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="literal">undefined</span> ]</div><div class="line">&#125;);</div><div class="line"><span class="comment">// "&#123;"c":[null,null]&#125;"</span></div><div class="line"></div><div class="line">stringify()方法把正则表达式和数学对象转换成空对象的字符串形式</div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="regexp">/foo/</span>) <span class="comment">// "&#123;&#125;"</span></div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">Math</span>) <span class="comment">// "&#123;&#125;"</span></div><div class="line"></div><div class="line">stringify()方法把日期对象和包装对象转换成字符串</div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>)) <span class="comment">//"true"</span></div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'123'</span>)) <span class="comment">//""123""</span></div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)) <span class="comment">//"1"</span></div><div class="line"><span class="built_in">JSON</span>.stringify(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">//""2016-09-20T02:26:38.294Z""</span></div><div class="line"></div><div class="line"><span class="built_in">JSON</span>.stringify()方法会忽略对象的不可遍历属性</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</div><div class="line">  <span class="string">'foo'</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">'bar'</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// &#123;"foo":1&#125;]</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="3-2-参数"><a href="#3-2-参数" class="headerlink" title="3-2. 参数"></a>3-2. 参数</h6><ul>
<li>JSON.stringify()除序列化的javascript对象外,还可以接受两个参数,这两个参数用于指定以不同的方式序列化JavaScript对象.</li>
<li>第一个参数是一个过滤器,可以是一个数组,也可以是一个函数</li>
<li>第二个参数是一个选项,在JSON字符串中保留缩进</li>
</ul>
<ol>
<li><p>当stringify()方法的第二个参数是一个数组时,这时相当于实现一个过滤器的功能<br>过滤器只对对象的第一层属性有效</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var jsonObj = &#123;</div><div class="line">    <span class="string">"title"</span>:<span class="string">"javascript"</span>,</div><div class="line">    <span class="string">"group"</span>:&#123;</div><div class="line">        <span class="string">"a"</span>:<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">JSON.stringify(jsonObj,[<span class="string">"group"</span>,<span class="string">"a"</span>]) // &#123;<span class="string">"group"</span>:&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤器对数组无效</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonObj =[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="built_in">JSON</span>.stringify(jsonObj,[<span class="string">"0"</span>])<span class="comment">//"[1,2]"</span></div></pre></td></tr></table></figure>
</li>
<li><p>stringify()方法的第二个参数也可以是一个函数。<br>传入的函数接收两个参数，属性(键)名和属性值</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">JSON.stringify(&#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125;,<span class="keyword">function</span>(key, <span class="keyword">value</span>)&#123;</div><div class="line">  <span class="keyword">if</span> (typeof <span class="keyword">value</span> === <span class="string">"number"</span>) &#123;</div><div class="line">    <span class="keyword">value</span> = <span class="number">2</span> * <span class="keyword">value</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">value</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// "&#123;"a":2,"b":4&#125;"</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意:属性名只能是字符串，而在值并非键值对儿结构的值时，键名可以是空字符串</p>
</li>
<li>stringify()方法还可以接受第三个参数，用于增加返回的JSON字符串的可读性</li>
<li>如果是数字，表示每个属性前面添加的空格(最多不超过10个)</li>
<li><p>如果是字符串(不超过10个字符)，则该字符串会添加在每行前面</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JSON.stringify(&#123; p1:<span class="number">1</span>, p2:<span class="number">2</span> &#125;, null, '<span class="string">|-');</span></div><div class="line">返回:<span class="string">"&#123;</span></div><div class="line"><span class="string">|-"</span>p1<span class="string">": 1,</span></div><div class="line"><span class="string">|-"</span>p2<span class="string">": 2</span></div><div class="line">&#125;<span class="string">"</span></div></pre></td></tr></table></figure>
</li>
<li><p>toJSON();JSON.stringify()还是不能满足对某些对象进行自定义序列化的需求。在这些情况下,可以通过对象上调用toJSON()方法,返回其自身的JSON数据格式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="string">'foo'</span>,</div><div class="line">  <span class="attr">toJSON</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'bar'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">JSON</span>.stringify(&#123;<span class="attr">x</span>: o&#125;);<span class="comment">// '&#123;"x":"bar"&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="四-JSON对象的parse-方法。"><a href="#四-JSON对象的parse-方法。" class="headerlink" title="四.JSON对象的parse()方法。"></a>四.JSON对象的parse()方法。</h5><ul>
<li>JSON.parse方法用于将JSON字符串转化成对象</li>
</ul>
<ol>
<li>如果传入的字符串不是有效的JSON格式，JSON.parse方法将报错</li>
<li>JSON.parse()方法也可以接收一个函数参数，在每个键值对儿上调用，这个函数被称为还原函数(reviver)。该函数接收两个参数，一个键和一个值，返回一个值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">如果还原函数返回<span class="literal">undefined</span>，则表示要从结果中删除相应的键；</div><div class="line">如果返回其他值，则将该值插入到结果中</div><div class="line"><span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a":1,"b":2&#125;'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (key === <span class="string">''</span>)&#123;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (key === <span class="string">'a'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> value + <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">o.a <span class="comment">// 11</span></div><div class="line">o.b <span class="comment">// undefined</span></div><div class="line"></div><div class="line">在将日期字符串转换为<span class="built_in">Date</span>对象时，经常要用到还原函数</div><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">    <span class="string">"title"</span>: <span class="string">"javascript"</span>,</div><div class="line">    <span class="string">"date"</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">9</span>,<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> jsonStr = <span class="built_in">JSON</span>.stringify(book);</div><div class="line"><span class="comment">//'&#123;"title":"javascript","date":"2016-09-30T16:00:00.000Z"&#125;''</span></div><div class="line"><span class="built_in">console</span>.log(jsonStr)</div><div class="line"></div><div class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonStr,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(key == <span class="string">'date'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(bookCopy.date.getFullYear());<span class="comment">//2016</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>()类似于<span class="built_in">JSON</span>.parse()方法，可以将json字符串转换为json对象</div><div class="line"><span class="built_in">eval</span>(<span class="string">'('</span> + <span class="string">'&#123;"a":1&#125;'</span>+<span class="string">')'</span>).a;<span class="comment">//1</span></div><div class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a":1&#125;'</span>).a;<span class="comment">//1</span></div><div class="line"></div><div class="line"><span class="built_in">eval</span>(<span class="string">'('</span> + <span class="string">'&#123;"a":alert(1)&#125;'</span>+<span class="string">')'</span>).a;<span class="comment">//弹出1</span></div><div class="line"><span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a":alert(1)&#125;'</span>).a;<span class="comment">//报错</span></div><div class="line">但是，<span class="built_in">eval</span>()可以执行不符合<span class="built_in">JSON</span>格式的代码，有可能会包含恶意代码</div><div class="line">所以，还是要尽量少使用<span class="built_in">eval</span>()</div></pre></td></tr></table></figure>
<h5 id="何时是JSON，何时不是JSON？"><a href="#何时是JSON，何时不是JSON？" class="headerlink" title="何时是JSON，何时不是JSON？"></a>何时是JSON，何时不是JSON？</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;1.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;json(javascript object notaion)全称是javascript对象表示法,它是一种数据交换的文本格式,而不是一种数据交换的文本格式,而不是一种编程语
    
    </summary>
    
      <category term="寄蜉蝣于天地,渺沧海之一粟" scheme="https://double1000.github.io/blog/categories/%E5%AF%84%E8%9C%89%E8%9D%A3%E4%BA%8E%E5%A4%A9%E5%9C%B0-%E6%B8%BA%E6%B2%A7%E6%B5%B7%E4%B9%8B%E4%B8%80%E7%B2%9F/"/>
    
    
      <category term="JSON" scheme="https://double1000.github.io/blog/tags/JSON/"/>
    
      <category term="JavaScript" scheme="https://double1000.github.io/blog/tags/JavaScript/"/>
    
      <category term="Notes" scheme="https://double1000.github.io/blog/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes | 面对对象</title>
    <link href="https://double1000.github.io/blog/2017/04/06/javascript-notes-%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    <id>https://double1000.github.io/blog/2017/04/06/javascript-notes-面对对象/</id>
    <published>2017-04-06T06:12:35.000Z</published>
    <updated>2017-04-06T06:20:42.283Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" class="full-image"></p>
<h4 id="一-相关概念"><a href="#一-相关概念" class="headerlink" title="一.相关概念"></a>一.相关概念</h4><ul>
<li>面对对象是一种大家很熟悉的<code>程序设计思想</code>，是对真实世界的<code>抽象</code></li>
<li>面对对象的基础是<code>类</code>，通过类的封装继承来映射真实世界</li>
<li>JS也是面对对象编程语言，只不过它实现面对对象的思路是<code>基于原型（prototype),而不是类</code>，这种思路也叫<code>对象关联</code></li>
<li>每个对象都有一个<code>原型</code>（Object除外）这个原型，大概就像java中的父类</li>
<li>创建对象的方法，字面量，工厂模式，构造函数，原型，混合，<code>ES6提供的class类</code></li>
<li><strong>相关术语</strong>：<code>多态</code>/<code>动态绑定</code>/<code>继承</code>/<code>封装</code>/<code>属性</code>/<code>方法</code>/<code>消息</code>/<code>接口</code>/<code>对象持久性</code>/<code>原型链</code>/</li>
</ul>
<h4 id="二-术语解释"><a href="#二-术语解释" class="headerlink" title="二.术语解释"></a>二.术语解释</h4><ol>
<li><strong>多态</strong>：一个对象变量<code>可以引用多种实际类型</code>的现象叫做多态。在java和c++语言中指的是可以用子类对象赋给父类对象，说到多态，就要说说覆盖。<code>覆盖</code>实际上指在同一个函数原型的情况下，将父类的一个实现替换为子类的一个实现</li>
<li><strong>动态绑定</strong>：在运行时能够<code>自动选择</code>调用那个方法的现象叫做动态绑定</li>
<li><p><strong>继承</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>公共操作和域放在超类</div><div class="line"><span class="bullet">2. </span>不要使用受保护的域 使用继承实现'is-a'关系</div><div class="line"><span class="bullet">3. </span>除非所有继承的方法都有意义，否则不要使用继承</div><div class="line"><span class="bullet">4. </span>在覆盖方法时，不要改变预期的行为</div><div class="line"><span class="bullet">5. </span>使用多态，而非类型信息</div><div class="line"><span class="bullet">6. </span>不要使用过多的反射</div></pre></td></tr></table></figure>
</li>
<li><p><strong>全局数据</strong>：如果设计合理，OO设计中根本不会出现<code>全局数据子类</code>的东西，这一点保证了OO系统中的<code>高度数据完整性</code>。</p>
</li>
<li><strong>数据隐藏</strong>：在OO术语中，数据表示为<code>属性</code>，行为表示为<code>方法</code>，限制对某些数据或方法的访问叫做<code>数据隐藏</code>，为了支持数据隐藏的概念，方法里提出了<code>访问方法</code>，和<code>设置方法</code>两种特殊方法</li>
<li><strong>封装</strong>：通过把<code>数据和方法合并到一个对象</code>里，以<code>控制对数据和方法的访问</code>，通常，一个对象不应该对另一个对象的内部数据进行操作，应该设计完成特定任务的小对象，而不是设计完成许多功能的大对象<ol>
<li><strong>对象数据方法表达方式</strong> ： <code>属性(attribute)</code>,特性(property)/<code>方法(method)</code>,行为(behavior)</li>
<li><strong>类和对象的关系</strong>：<code>类是创建对象的模板</code>，我们使用类来创建对象。当一个对象被创建时，我们说<code>对象被实例化</code>。<strong>对象被实例化后，才会在内存中存在</strong>。例子：在关系型数据库中，表的定义就是类，表中的行数据是对象</li>
<li><strong>消息</strong>：消息是<code>对象之间的通讯机制</code>。当对象A调用对象B的一个方法时，就是对象A在向对象B发送一个消息。</li>
<li><strong>接口</strong>： 最终<code>为用户提供服务的集合</code>。理想情况下，应该只为最终用户提供它们需要的服务。<code>接口要最小化</code>。</li>
<li><strong>对象持久性</strong>:指<code>保存对象的状态</code>。从而可以在以后恢复且使用。</li>
<li><strong>原型链</strong>:实例对象与原型之间的连接，叫做<code>原型链</code></li>
</ol>
</li>
</ol>
<h4 id="三-设计原则"><a href="#三-设计原则" class="headerlink" title="三.设计原则"></a>三.设计原则</h4><ul>
<li>找出变化之处，封装起来，不要把它们和不需要变化的代码混在一起<code>(策略模式)</code></li>
<li><code>针对接口编程</code>，而不是针对实现编程(策略模式)</li>
<li>多用<code>组合</code>，少用<code>继承</code>(策略模式)</li>
<li>设计具有<code>松耦合关系</code>的对象(观察者模式)</li>
<li>对<code>扩展开放</code>，对<code>修改封闭</code>(装饰者模式)</li>
<li>依赖倒置原则：要依赖抽象，不要依赖具体类(工厂模式)</li>
<li>最少知识原则：只和你的密友聊天(也叫黛尔特法则)</li>
<li>好莱坞原则：别调用我们，我们会调用你，即底层组件将自己挂钩到系统中，由高层组件决定合适和如果用底层组件(模板方法模式中由超类控制一切，当它们需要的时候，自然会去调用子类)</li>
<li><p>单一责任原则：<code>一个类应该只有一个引起变化的原因</code>。该原则体现了面对对象中的类聚概念。</p>
<h4 id="四-对象的创建"><a href="#四-对象的创建" class="headerlink" title="四.对象的创建"></a>四.对象的创建</h4><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>字面量</div><div class="line"><span class="built_in">var</span> Person = &#123;</div><div class="line"><span class="attribute">name</span> : <span class="string">"name"</span>,</div><div class="line"><span class="attribute">age</span> : <span class="string">"Age"</span>,</div><div class="line"><span class="attribute">method</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">注意:创建一个类似的对象，会产生大量的代码</div><div class="line"></div><div class="line"><span class="number">2.</span>工厂模式</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="built_in">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//1.原料</span></div><div class="line">    obj.name = name;<span class="comment">//2.加工</span></div><div class="line">    obj.age = age;</div><div class="line">    obj.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> obj;<span class="comment">//3.出场</span></div><div class="line">&#125;</div><div class="line"><span class="number">2</span><span class="number">-1.</span>解决多个类似对象声明问题。解决了实例化对象产生大量重复问题</div><div class="line"><span class="number">2</span><span class="number">-2.</span>识别问题，根本无法搞清楚它们到底是那个对象的实例</div><div class="line"></div><div class="line"><span class="number">3.</span>构造函数</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="number">3</span><span class="number">-1.</span>解决了重复实例化的问题,又解决了对象识别问题</div><div class="line"><span class="number">3</span><span class="number">-2.</span>有显示的创建对象,直接将属性和方法赋值给<span class="keyword">this</span>对象</div><div class="line"><span class="number">3</span><span class="number">-3.</span>没有<span class="keyword">return</span>语句,调用的时候前必须加<span class="keyword">new</span>调用,不然就是普通函数调用</div><div class="line"></div><div class="line"><span class="number">4.</span>原型方式</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype.name = <span class="string">"name"</span>; <span class="comment">//1.原型添加属性</span></div><div class="line">Person.prototype.age = <span class="string">"age"</span>;</div><div class="line">Person.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);    <span class="comment">//2.原型上添加方法</span></div><div class="line">&#125;</div><div class="line"><span class="number">4</span><span class="number">-1.</span>创建的每个函数都有一个prototype属性,这个属性是个对象</div><div class="line"><span class="number">4</span><span class="number">-2.</span>原型的好处可以让所有对象实例共享它所有包含的属性和方法</div><div class="line"><span class="number">4</span><span class="number">-3.</span>缺点是传参问题。</div><div class="line"></div><div class="line"><span class="number">5.</span>组合构造函数 + 原型模式</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name; <span class="comment">// 1.属性写在构造函数里面</span></div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;;</div><div class="line">Person.prototype = &#123;  <span class="comment">// 2.方法写在原型里面</span></div><div class="line">    <span class="attribute">constructor</span> : Person,</div><div class="line">    <span class="attribute">method</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="number">5</span><span class="number">-1.</span>这种混合模式很好解决了传参和引用共享的难题。</div><div class="line"><span class="number">5</span><span class="number">-2.</span>原型模式,不管是否调用了原型中的共享方法,都会初始化原型中的方法.</div><div class="line"><span class="number">5</span><span class="number">-3.</span>在声明一个对象时构造函数+原型部分让人感觉怪异,最好就是把构造函数和原型封装到一起</div><div class="line"></div><div class="line"><span class="number">6.</span>动态原型模式</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123; <span class="comment">//1.将所有信息封装到函数体内</span></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.method != <span class="string">'function'</span>)&#123; <span class="comment">// 2.仅在第一次调用时初始化</span></div><div class="line">        Person.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="number">6</span><span class="number">-1.</span>注意：不可以再使用字面量的方式重写原型，因为会切断实例和新原型之间的联系</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="五-继承"><a href="#五-继承" class="headerlink" title="五.继承"></a>五.继承</h4><blockquote>
<p>继承是面对对象中一个比较核心的概念，其它面对对象语言都会用两种方式实现继承，<em>一个是接口实现</em>/<em>一个是继承</em>/ ES只支持继承，不支持接口实现，而实现继承的方式是依靠原型链完成</p>
</blockquote>
<ol>
<li>JavaScript里,被继承的函数被称为超类（父类,基类也行）</li>
<li>继承的函数称为子类型（子类，派生类）</li>
<li><p>继承也有之前问题,字面量重写原型会中断关系,使用引用类型的原型,并且子类型还无法给超类型传递参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>对象冒充(伪造对象/经典继承)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name,age</span>)</span>&#123; <span class="comment">// 父类</span></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">birth,name,age</span>)</span>&#123; <span class="comment">// 子类</span></div><div class="line">    Father.call(<span class="keyword">this</span>,name,age,birth); <span class="comment">//对象冒充，给超类传参</span></div><div class="line">&#125;</div><div class="line"><span class="number">1</span><span class="number">-1.</span>这种继承解决了引用共享和超类无法传参的问题。但没有原型,复用则无从谈起。</div><div class="line"></div><div class="line"><span class="number">2.</span>原型式继承</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">     <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line"> Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'parent name:'</span>, <span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">     <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line"> Child.prototype = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</div><div class="line"> Child.prototype.constructor = Child;</div><div class="line"> Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'child name:'</span>, <span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>);</div><div class="line"> child.sayName();    <span class="comment">// child name: son</span></div><div class="line"></div><div class="line"><span class="number">2</span><span class="number">-1.</span>子类型无法给超类型传递参数,在面向对象的继承中,我们总希望通过 <span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>, <span class="string">'father'</span>).让子类去调用父类的构造器来完成继承。而不是通过像这样 <span class="keyword">new</span> Parent(<span class="string">'father'</span>) 去调用父类。</div><div class="line"><span class="number">2</span><span class="number">-2.</span>Child.prototype.sayName 必须写在 Child.prototype = <span class="keyword">new</span> Parent(<span class="string">'father'</span>); 之后，不然就会被覆盖掉。</div><div class="line"></div><div class="line"><span class="number">3.</span> 类式继承</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line">Parent.prototype.doSomthing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent do something!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, parentName</span>) </span>&#123;</div><div class="line">    Parent.call(<span class="keyword">this</span>, parentName);</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>);</div><div class="line">child.sayName();      <span class="comment">// child name: son</span></div><div class="line">child.doSomthing();   <span class="comment">// TypeError: child.doSomthing is not a function</span></div><div class="line"></div><div class="line"><span class="number">3</span><span class="number">-1.</span>相当于 Parent 这个函数在 Child 函数中执行了一遍，并且将所有与 <span class="keyword">this</span> 绑定的变量都切换到了 Child 上，这样就克服了第一种方式带来的问题。</div><div class="line"><span class="number">3</span><span class="number">-2.</span>缺点：没有原型,每次创建一个 Child 实例对象时候都需要执行一遍 Parent 函数,无法复用一些公用函数。</div><div class="line"></div><div class="line"><span class="number">4.</span> 组合式继承：前两种方式的结合</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line">Parent.prototype.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent do something!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, parentName</span>) </span>&#123;</div><div class="line">    Parent.call(<span class="keyword">this</span>, parentName); <span class="comment">//第二次调用</span></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();</div><div class="line">Child.prototype.construtor = Child;</div><div class="line"></div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>); <span class="comment">//第一次调用</span></div><div class="line">child.sayName();       <span class="comment">// child name: son</span></div><div class="line">child.doSomething();   <span class="comment">// parent do something!</span></div><div class="line"></div><div class="line"><span class="number">4</span><span class="number">-1.</span>组合式继承是比较常用的一种继承方法,其背后的思路是使用原型链实现对原型属性和方法的继承,而通过借用构造函数来实现对实例属性的继承。</div><div class="line"><span class="number">4</span><span class="number">-2.</span>通过在原型上定义方法实现了函数复用,又保证每个实例都有它自己的属性。</div><div class="line"><span class="number">4</span><span class="number">-3.</span>缺点:组合式继承是 JS 最常用的继承模式,但组合继承使用过程中会被调用两次：一次是创建子类型的时候，另一次是在子类型构造函数的内部。</div><div class="line"></div><div class="line"><span class="number">5.</span>  寄生组合式继承</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, parentName</span>) </span>&#123;</div><div class="line">    Parent.call(<span class="keyword">this</span>, parentName);</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">proto</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = proto;</div><div class="line">    F.prototype.construtor = F;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line">Child.prototype = create(Parent.prototype);</div><div class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'child name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line">Child.prototype.construtor = Child;</div><div class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</div><div class="line">parent.sayName();    <span class="comment">// parent name: father</span></div><div class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>, <span class="string">'father'</span>);</div><div class="line">child.sayName();     <span class="comment">// child name: son</span></div><div class="line"></div><div class="line"><span class="number">5</span><span class="number">-1.</span>这就是所谓的寄生组合式继承方式,跟组合式继承的区别在于,他不需要在一次实例中调用两次父类的构造函数,假如说父类的构造器代码很多,还需要调用两次的话对系统肯定会有影响，</div><div class="line"><span class="number">5</span><span class="number">-2.</span>寄生组合式继承的思想在于,用一个 F 空的构造函数去取代执行了 Parent 这个构造函数。</div><div class="line"></div><div class="line">在上面的代码中,我们手动创建了一个 create 函数,但是其实是存在于 <span class="built_in">Object</span> 对象中,不需要我们手动去创建</div><div class="line"></div><div class="line"><span class="number">6.</span>  ES <span class="number">6</span> 继承</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    doSomething() &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'parent do something!'</span>);</div><div class="line">    &#125;</div><div class="line">    sayName() &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'parent name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, parentName) &#123;</div><div class="line">	<span class="keyword">super</span>(parentName);</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    sayName() &#123;</div><div class="line"> 	<span class="built_in">console</span>.log(<span class="string">'child name:'</span>, <span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>, <span class="string">'father'</span>);</div><div class="line">child.sayName();            <span class="comment">// child name: son</span></div><div class="line">child.doSomething();        <span class="comment">// parent do something!</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</div><div class="line">parent.sayName();           <span class="comment">// parent name: father</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="六-方法"><a href="#六-方法" class="headerlink" title="六.方法"></a>六.方法</h4><ul>
<li>Object.getPrototypeof(),查看一个对象的原型。跟<code>__proto__(隐式引用)</code>返回结果一样</li>
<li>Object.setPrototypeOf(obj,prototype),obj要设置其原型的对象,该对象的新原型</li>
<li>Obj.constructor 查看对象的构造函数</li>
<li>Obj.hasOwnProperty(),判断属性是在构造函数的实例里,还是在原型链</li>
</ul>
<h4 id="七-难点"><a href="#七-难点" class="headerlink" title="七.难点"></a>七.难点</h4><ol>
<li><strong>proto</strong>与prototype的区别？</li>
</ol>
<ul>
<li>无论对象是如何创建的,默认的原型都是Object,通过构造函数来创建对象,函数本身也是一个对象。函数的<code>prototype</code>属性只有在当作构造函数创建的时候，把自身的prototype属性值赋给对象的原型,而实际上,作为函数本身,它的原型应该是<code>function</code>，然后function对象的原型才是Object,建议使用ES6推荐的查看原型和设置原型的方法。<code>instance.constructor.prototype = instance.__proto__</code></li>
<li>只有<code>函数对象才有prototype</code>属性。</li>
</ul>
<ol>
<li>new 操作符具体干了什么呢？</li>
</ol>
<ul>
<li><code>创建</code>一个新对象</li>
<li>将构造函数的<code>作用域赋给新对象</code>(因此this就指向了这个新对象)</li>
<li><code>执行</code>构造函数中的代码(为这个新对象添加属性和方法)</li>
<li><code>返回</code>新对象</li>
</ul>
<ol>
<li>构造函数与普通函数的区别？</li>
</ol>
<ul>
<li>构造函数本身也是函数，只不过可以用来<code>构建对象</code>而已</li>
<li>调用方式不同,任何函数只要通过<code>new操作符</code>来调用,那它就可以作为构造函数,而任何函数如果不通过new操作符来调用,跟普通函数并无二致。如果不使用new操作符,属性和方法都被添加给window对象了。当在全局作用域调用一个函数时,this对象总是指向<code>Global对象</code>(在浏览器中就是window对象)</li>
</ul>
<ol>
<li>基于类的面对对象和基于原型的面对对象方式不同之处？</li>
</ol>
<ul>
<li>在基于类的面对对象方式中,对象(Object)依靠<code>类(class)</code>来产生。</li>
<li>在基于原型的面对对象方式中,对象则是依靠<code>构造器(constructor)</code>利用<code>原型(prototype)</code>构造出来的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;1.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;一-相关概念&quot;&gt;&lt;a href=&quot;#一-相关概念&quot; class=&quot;headerlink&quot; title=&quot;一.相关概念&quot;&gt;&lt;/a&gt;一.相关概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;面对对象
    
    </summary>
    
      <category term="寄蜉蝣于天地,渺沧海之一粟" scheme="https://double1000.github.io/blog/categories/%E5%AF%84%E8%9C%89%E8%9D%A3%E4%BA%8E%E5%A4%A9%E5%9C%B0-%E6%B8%BA%E6%B2%A7%E6%B5%B7%E4%B9%8B%E4%B8%80%E7%B2%9F/"/>
    
    
      <category term="JavaScript" scheme="https://double1000.github.io/blog/tags/JavaScript/"/>
    
      <category term="Notes" scheme="https://double1000.github.io/blog/tags/Notes/"/>
    
      <category term="prototype" scheme="https://double1000.github.io/blog/tags/prototype/"/>
    
      <category term="继承" scheme="https://double1000.github.io/blog/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes | 字符串</title>
    <link href="https://double1000.github.io/blog/2017/04/06/javascript-notes-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://double1000.github.io/blog/2017/04/06/javascript-notes-字符串/</id>
    <published>2017-04-06T03:48:28.000Z</published>
    <updated>2017-04-06T06:20:42.330Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" class="full-image"></p>
<h4 id="一-字符串的属性"><a href="#一-字符串的属性" class="headerlink" title="一.字符串的属性"></a>一.字符串的属性</h4><ol>
<li>length:字符串的每个实例都有一个length属性,表示字符串中的字符个数,由于字符串是不变的，所以字符串的长度也不可变<blockquote>
<p>特性:字符串的length属性不会再<code>for/in</code>循环中枚举,也不能通过<code>delete</code>删除,索引从0开始</p>
<h4 id="二-字符串通用方法"><a href="#二-字符串通用方法" class="headerlink" title="二.字符串通用方法"></a>二.字符串通用方法</h4><p><code>String</code>类型是与字符串对象的包装类型,继承了Object的通用方法</p>
</blockquote>
</li>
<li>toString();该方法返回string的原始字符串值。</li>
<li>toLocaleString();该方法返回string的原始字符串值。</li>
<li>valueOf();该方法返回string的原始字符串值<h4 id="三-字符串实例方法"><a href="#三-字符串实例方法" class="headerlink" title="三.字符串实例方法"></a>三.字符串实例方法</h4><h5 id="1-访问字符方法"><a href="#1-访问字符方法" class="headerlink" title="1. 访问字符方法"></a>1. 访问字符方法</h5><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">1. String.prototype.charAt(number);</div><div class="line">1-1. charAt()方法接受一个基于0的字符串位置的参数,返回指定位置的字符。</div><div class="line">1-2. 当参数为空或者NaN时,默认参数为0</div><div class="line">1-3. 当参数超出范围时,则返回一个空字符串</div><div class="line"></div><div class="line">var str = &apos;hello&apos;;</div><div class="line">console.log(str.charAt(NaN)); // h</div><div class="line">注意：charAt()方法涉及到Number()函数的隐式类型转换,如果转换为数值,如果转换为NaN,则输出第0个字符</div><div class="line">注意: str.charAt(pos)与str.substring(pos, pos+1)、str.substr(pos,1)、str.slice(pos,pos+1)的结果相等</div><div class="line"></div><div class="line">2. [number]中括号</div><div class="line">2-1. ES5,使用方括号加数字索引来访问字符串中的特定字符。</div><div class="line">2-2. 如果参数超出范围或是NaN时,则输出undefined;没有参数,会报错</div><div class="line">2-3. 该方法没有Number()转型函数的隐式转换,但参数为单数值数组时可转换为数值</div><div class="line"></div><div class="line">3. String.prototype.charCodeAt(number);</div><div class="line">3-1. 类似charAt()方法,返回的是指定位置的字符16位Unicode编码</div><div class="line">3-2. 返回值是一个16位的整数,在0~65525之间,即0x0000 - 0xffff之间</div><div class="line">3-3. 参数为空或NaN时,默认参数为0,当参数超出范围时,则返回NaN</div><div class="line">3-4. 注意:charCodeAt()方法涉及到Number()函数的隐式类型转换,如果转换为数值,则按照上述规则输出相应值;如果转换为NaN,则输出第0个字符的字符编码</div><div class="line"></div><div class="line">4. String.fromCharCode();</div><div class="line">4-1. 这是一个属于String的静态方法</div><div class="line">4-2. 这个方法的任务是接受一个或多个字符编码,然后把它们转换成一个字符串。</div><div class="line">4-3. 从本质上看,这个方法与实例方法charCodeAt()执行的是相反的操作,若参数为空NaN时,则返回空字符串</div><div class="line">4-4. 若参数超出0~65535的范围,则输出字符不可控</div><div class="line">注意:如果一个字符占用四字节,则需要拆分两个字符表示</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="2-字符串拼接"><a href="#2-字符串拼接" class="headerlink" title="2.字符串拼接"></a>2.字符串拼接</h5><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1. String.prototype.concat();</div><div class="line">1-1. concat()方法用于将一个或多个字符串拼接起来,返回拼接得到的新字符串</div><div class="line">1-2. 返回拼接得到的新字符串,而源字符串不发生改变</div><div class="line">1-3. 若参数(第一个参数除外)不是字符串,则听过String()方法隐士转换为字符串,再进行字符串拼接</div><div class="line">注意:第一个参数只能是字符串,如果是其他类型(数组除外)则报错</div><div class="line">注意:由于数组也存在concat()方法,参数会按照首先出现的参数是数组还是字符串来决定如何转换</div><div class="line"></div><div class="line">2. +(加号运算符)</div><div class="line">2-1. 实践中使用更多的还是加号运算符。使用加号运算符再许多时候都比concat简单易行</div><div class="line">注意:当操作数其中一个是字符串,或者对象转换为字符串时,才进行字符串拼接</div></pre></td></tr></table></figure>
<h5 id="3-创建子字符串"><a href="#3-创建子字符串" class="headerlink" title="3.创建子字符串"></a>3.创建子字符串</h5><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">1. String.prototype.slice();</div><div class="line">1-1. slice(start,end),返回这个字符串中从start位置的字符到(但不包含)end位置的字符的一个子字符串.</div><div class="line">1-2. 如果end为end为undefined或不存在,则返回从start位置到字符串结尾的所有字符</div><div class="line">1-3. 如果start是负数,则start=max(length + start,0);</div><div class="line">1-4. 如果end是负数,则end=max(length + end,0);</div><div class="line">注意:slice()方法涉及到Number()转型函数的隐式类型转换，当start被转换为NaN时，相当于start = 0；当end被转换为NaN时(end为undefined除外)，则输出空字符串</div><div class="line"></div><div class="line">2. String.prototype.substring();</div><div class="line">2-1. substring(start,end)返回这个字符串中从start位置的字符到(但不包含)end位置的字符的一个子字符串；</div><div class="line">2-2. 如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符。</div><div class="line">2-3. 同样地，substring()方法也涉及到Number()转型函数的隐式类型转换</div><div class="line">注意:如果任一参数是NaN或负数，则被0取代</div><div class="line">注意:如果任一参数大于字符串长度，则被字符串长度取代</div><div class="line">注意:如果start 大于 end，则交换它们的值</div><div class="line"></div><div class="line">3.String.prototype.substr();</div><div class="line">3-1. substr(start,end)end代表返回的子字符串的字符个数,该方法返回这个字符串中从start位置的字符开始的end个字符的一个子字符串</div><div class="line">3-2. 如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符</div><div class="line">3-3. 如果start是负数，则start = max(length + start,0)</div><div class="line">3-4. 如果start是NaN，则相当于start = 0</div><div class="line">注意:如果end是负数或NaN，则end = 0，因此会返回空字符串</div><div class="line">注意:start和end无法交换位置</div><div class="line">注意:该方法不是ECMAScript标准，已经被弃用</div><div class="line">注意:substr()方法也涉及到Number()转型函数的隐式类型转换</div></pre></td></tr></table></figure>
<h5 id="3-大小写转换"><a href="#3-大小写转换" class="headerlink" title="3.大小写转换"></a>3.大小写转换</h5><ol>
<li>toUpperCase()方法将字符串转换成大写;</li>
<li>toLowerCase()方法将字符串转换成小写;</li>
<li>toLocaleUpperCase()方法将字符串转换成大写(针对地区);</li>
<li>toLocaleLowerCase()方法将字符串转换成小写(针对地区);<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意:在不知道自己的代码将在哪个语言环境中运行的情况下，使用针对地区的方法更稳妥</div><div class="line">注意:这<span class="number">4</span>种方法均不支持<span class="keyword">String</span>()隐式类型转换，只支持字符串类型</div><div class="line">注意:大小写转换方法可以连续使用</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="4-查找子串位置"><a href="#4-查找子串位置" class="headerlink" title="4.查找子串位置"></a>4.查找子串位置</h5><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">有两个从字符串中查找子字符串位置的方法:indexOf()和lastIndexOf()。</div><div class="line">查找子串位置的方法同访问字符方法charAt()和中括号[]方法有相反的地方，一个通过字符串查找位置，一个则是通过位置查找字符</div><div class="line"></div><div class="line">1. String.prototype.indexOf();</div><div class="line">1-1. indexOf(searchString,start)方法接收searchString和start两个参数，返回searchString首次出现的位置，如果没有找到则返回-1</div><div class="line">1-2. 该方法会隐式调用String()转型函数，将searchString非字符串值转换为字符串；隐式调用Number()转型函数，将start非数字值(undefined除外)转换为数值</div><div class="line">1-3. searchString表示要搜索的子字符串；start表示该搜索的开始位置，若忽略该参数或该参数为undefined、NaN或负数时，start = 0</div><div class="line"></div><div class="line">2.String.prototype.lastIndexOf();</div><div class="line">2-1. 与indexOf()不同，lastIndexOf()从右向左查找</div><div class="line">2-2. lastIndexOf(searchString,start)方法接收searchString和start两个参数，返回searchString第一次出现的位置，如果没有找到则返回-1</div><div class="line">2-3. 同样地，该方法会隐式调用String()转型函数，将searchString非字符串值转换为字符串；隐式调用Number()转型函数，将start非数字值(undefined除外)转换为数值</div><div class="line">2-4. searchString表示要搜索的子字符串；start表示该搜索的开始位置，若忽略该参数或该参数为undefined、NaN时，start = length - 1；若start为负数，start = 0</div><div class="line"></div><div class="line">**例子:查找出字符串所有符合条件的子字符串**</div><div class="line">function allIndexOf(str,value)&#123;</div><div class="line">    var result = [];</div><div class="line">    var pos = str.indexOf(value);</div><div class="line">    while(pos &gt; -1)&#123;</div><div class="line">        result.push(pos);</div><div class="line">        pos = str.indexOf(value,pos+value.length);</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">console.log(allIndexOf(&apos;helllhelllhelll&apos;,&apos;ll&apos;));//[2,7,12]</div></pre></td></tr></table></figure>
<h5 id="5-正则匹配方法"><a href="#5-正则匹配方法" class="headerlink" title="5.正则匹配方法"></a>5.正则匹配方法</h5><p>javascript中的一些正则操作如查找和测试等可以通过RegExp的方法实现，而切分和替换等另一些操作可以通过String类的方法实现String类共有match()、search()、replace()、split()这4种正则匹配方法<br><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">1. String.prototype.match();</div><div class="line">1-2. match()方法只接受一个为正则或字符串的参数，并以数组的形式返回匹配的内容。</div><div class="line">1-3. 这个方法类似于正则表达式RegExp的exec()方法，只是调换了RegExp和String对象的位置</div><div class="line">1-4. 若匹配失败,则match()方法返回null</div><div class="line"></div><div class="line">&apos;x&apos;.match(/y/);//null</div><div class="line">var string = &apos;cat,bat,sat,fat&apos;;</div><div class="line">var pattern = /.at/g;</div><div class="line">var matches = string.match(pattern);</div><div class="line">console.log(matches,matches.index,matches.input);//[&quot;cat&quot;, &quot;bat&quot;, &quot;sat&quot;, &quot;fat&quot;] undefined undefined</div><div class="line">var matches = string.match(pattern);</div><div class="line">console.log(matches,matches.index,matches.input);//[&quot;cat&quot;, &quot;bat&quot;, &quot;sat&quot;, &quot;fat&quot;] undefined undefined</div><div class="line"></div><div class="line">var string = &apos;cat,bat,sat,fat&apos;;</div><div class="line">var pattern = /.at/;</div><div class="line">var exec = pattern.exec(string);</div><div class="line">console.log(exec,exec.index,exec.input);//[&apos;cat&apos;] 0 &apos;cat,bat,sat,fat&apos;</div><div class="line">var exec = pattern.exec(string);</div><div class="line">console.log(exec,exec.index,exec.input);//[&apos;cat&apos;] 0 &apos;cat,bat,sat,fat&apos;</div><div class="line"></div><div class="line">例子：找出字符串中所有的数字</div><div class="line">var str1 = &apos;j1h342jg24g234j 3g24j1&apos;;</div><div class="line">array = str1.match(/\d+/g);</div><div class="line">console.log(array);//[&quot;1&quot;, &quot;342&quot;, &quot;24&quot;, &quot;234&quot;, &quot;3&quot;, &quot;24&quot;, &quot;1&quot;]</div><div class="line"></div><div class="line">注意:若不设置全局标志，match()方法和exec()方法结果相同</div><div class="line">注意:设置全局标志后,exec()方法依然返回单次的匹配结果，而match()方法会返回一个字符串数组,其中包括各次成功匹配的文本，但没有index和input属性</div><div class="line">注意:match()方法作为字符串String的方法，接受参数为字符串，结果与不设置全局标志的正则表达式为参数相同，只返回第一个匹配项，且具有index和input属性</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">2. String.prototype.search();</div><div class="line">2-1. search()方法接受一个正则或字符串的参数,返回匹配的内容在字符串中首次出现的位置,</div><div class="line">2-2.类似于不能设置起始位置的indexOf,找不到返回-1</div><div class="line">注意:search()方法不执行全局匹配，忽略全局标志g，也会忽略RegExp对象的lastIndex属性，总是从字符串的开始位置开始搜索</div><div class="line"></div><div class="line">例子：找出匹配的所有位置</div><div class="line">function fnAllSearch(str,pattern)&#123;</div><div class="line">    var pos = str.search(pattern);</div><div class="line">    var length = str.match(pattern)[0].length;</div><div class="line">    var index = pos+length;</div><div class="line">    var result = [];</div><div class="line">    var last = index;</div><div class="line">    result.push(pos);</div><div class="line">    while(true)&#123;</div><div class="line">        str = str.substr(index);</div><div class="line">        pos = str.search(pattern);</div><div class="line">        if(pos === -1)&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        length = str.match(pattern)[0].length;</div><div class="line">        index = pos+length;</div><div class="line">        result.push(last+pos);</div><div class="line">        last += index;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">console.log(fnAllSearch(&apos;cat23fbat246565sa3dftf44at&apos;,/\d+/));//[3,9,17,22]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">3. String.prototype.replace();</div><div class="line">3-1. replace()方法用于替换一个或多个子字符串。它接收两个参数：第一个是正则表达式或字符串，表示待查找的内容；第二个是字符串或函数，表示替换内容。</div><div class="line">3-2. 返回替换后的字符串</div><div class="line"></div><div class="line">注意:字符串替换，只能替换第一个子字符串</div><div class="line">var string = &apos;cat,bat,sat,fat&apos;;</div><div class="line">var result = string.replace(&apos;at&apos;,&apos;ond&apos;);</div><div class="line">console.log(result);//&apos;cond,bat,sat,fat&apos;</div><div class="line">注意:不设置全局标志g，也只能替换第一个子字符串</div><div class="line">var string = &apos;cat,bat,sat,fat&apos;;</div><div class="line">var result = string.replace(/at/,&apos;ond&apos;);</div><div class="line">console.log(result);//&apos;cond,bat,sat,fat&apos;</div><div class="line">注意:设置全局标志g，替换所有匹配的子字符串</div><div class="line">var string = &apos;cat,bat,sat,fat&apos;;</div><div class="line">var result = string.replace(/at/g,&apos;ond&apos;);</div><div class="line">console.log(result);//&apos;cond,bond,sond,fond&apos;</div><div class="line"></div><div class="line">replace()方法的第二个参数可以是函数，这样文本的处理更加灵活</div><div class="line">如果在只有一个匹配项的情况下，该方法会向这个函数传递3个参数：模式的匹配项、模式匹配项在字符串中的位置、原始字符串</div><div class="line">var string = &apos;cat,bat,sat,fat&apos;;</div><div class="line">var index = 0;</div><div class="line">var matchArray = [];</div><div class="line">var posArray = [];</div><div class="line">var text = &apos;&apos;;</div><div class="line">var result = string.replace(/at/g,function(match,pos,originalText)&#123;</div><div class="line">    matchArray.push(match);</div><div class="line">    posArray.push(pos);</div><div class="line">    text = originalText;</div><div class="line">    index++;</div><div class="line">    if(index % 2)&#123;</div><div class="line">        return &apos;wow&apos;;</div><div class="line">    &#125;else&#123;</div><div class="line">        return &apos;0&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">console.log(matchArray);//[&quot;at&quot;, &quot;at&quot;, &quot;at&quot;, &quot;at&quot;]</div><div class="line">console.log(posArray);//[1, 5, 9, 13]</div><div class="line">console.log(text);//&apos;cat,bat,sat,fat&apos;</div><div class="line">console.log(result);//&apos;cwow,b0,swow,f0&apos;</div><div class="line"></div><div class="line">例子:日期格式化</div><div class="line">var array = [&apos;2015.7.28&apos;,&apos;2015-7-28&apos;,&apos;2015/7/28&apos;,&apos;2015.7-28&apos;,&apos;2015-7.28&apos;,&apos;2015/7---28&apos;];</div><div class="line">function formatDate(date)&#123;</div><div class="line">    return date.replace(/(\d+)\D+(\d+)\D+(\d+)/,&apos;$1年$2月$3日&apos;)</div><div class="line">&#125;</div><div class="line">var result = [];</div><div class="line">for(var i = 0 ; i &lt; array.length; i++)&#123;</div><div class="line">    result.push(formatDate(array[i]));</div><div class="line">&#125;</div><div class="line">console.log(result);//[&quot;2015年7月28日&quot;, &quot;2015年7月28日&quot;, &quot;2015年7月28日&quot;, &quot;2015年7月28日&quot;, &quot;2015年7月28日&quot;, &quot;2015年7月28日&quot;]</div><div class="line">例子:找出重复项最多的字符和个数</div><div class="line">var str = &apos;aaaaabbbbbdddddaaaaaaaffffffffffffffffffgggggcccccce&apos;;</div><div class="line">var pattern = /(\w)\1+/g;</div><div class="line">var maxLength = 0;</div><div class="line">var maxValue = &apos;&apos;;</div><div class="line">var result = str.replace(pattern,function(match,match1,pos,originalText)&#123;</div><div class="line">    if(match.length &gt; maxLength)&#123;</div><div class="line">        maxLength = match.length;</div><div class="line">        maxValue = match1;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">console.log(maxLength,maxValue);//18 &quot;f&quot;</div></pre></td></tr></table></figure>
<h5 id="六-split-方法"><a href="#六-split-方法" class="headerlink" title="六.split()方法"></a>六.split()方法</h5><ol>
<li>split()方法基于指定的分隔符将一个字符串分割成多个字符串，并将结果放在一个数组中，分隔符可以是字符串，也可以是一个RegExp</li>
<li>该方法可以接受第二个参数(可选)用于指定数组的大小，如果第二个参数为0-array.length范围内的值时按照指定参数输出，其他情况将所有结果都输出</li>
<li>若指定分隔符没有出现在字符串中，则以数组的形式返回原字符串的值</li>
<li>参数中的正则表达式是否使用全局标志g对结果没有影响<figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var colorText = &apos;red,blue,green,yellow&apos;;</div><div class="line">console.log(colorText.split(&apos;&apos;));//[&quot;r&quot;, &quot;e&quot;, &quot;d&quot;, &quot;,&quot;, &quot;b&quot;, &quot;l&quot;, &quot;u&quot;, &quot;e&quot;, &quot;,&quot;, &quot;g&quot;, &quot;r&quot;, &quot;e&quot;, &quot;e&quot;, &quot;n&quot;, &quot;,&quot;, &quot;y&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;w&quot;]</div><div class="line">console.log(colorText.split(&apos;,&apos;));//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</div><div class="line">console.log(colorText.split(&apos;,&apos;,2));//[&quot;red&quot;, &quot;blue&quot;]</div><div class="line">console.log(colorText.split(&apos;,&apos;,6));//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</div><div class="line">console.log(colorText.split(&apos;-&apos;));//[&quot;red,blue,green,yellow&quot;]</div><div class="line">console.log(colorText.split(/\,/));//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</div><div class="line">console.log(colorText.split(/e/));//[&quot;r&quot;, &quot;d,blu&quot;, &quot;,gr&quot;, &quot;&quot;, &quot;n,y&quot;, &quot;llow&quot;]</div><div class="line">console.log(colorText.split(/[^\,]+/));//将除去逗号以外的字符串变为分隔符[&quot;&quot;, &quot;,&quot;, &quot;,&quot;, &quot;,&quot;, &quot;&quot;],IE8-会识别为[&quot;,&quot;,&quot;,&quot;,&quot;,&quot;]</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="七-去除首尾空格trim"><a href="#七-去除首尾空格trim" class="headerlink" title="七.去除首尾空格trim()"></a>七.去除首尾空格trim()</h5><ol>
<li>ECMAScript5为所有字符串定义了trim()方法。这个方法会创建一个字符串的副本，删除前置及后缀的所有空白字符，然后返回结果</li>
<li>由于trim()方法返回的是字符串的副本，所以原始字符串中的前置及后缀空格会保持不变,意思就是不改变原字符串<figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">正则模拟去除字符串首尾空格</div><div class="line">function fnTrim(str)&#123;</div><div class="line">    return str.replace(/^\s+|\s+$/,&apos;&apos;)</div><div class="line">&#125;</div><div class="line">console.log(fnTrim(&apos;hello world&apos;));//&apos;hello world&apos;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;1.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;一-字符串的属性&quot;&gt;&lt;a href=&quot;#一-字符串的属性&quot; class=&quot;headerlink&quot; title=&quot;一.字符串的属性&quot;&gt;&lt;/a&gt;一.字符串的属性&lt;/h4&gt;&lt;ol&gt;

    
    </summary>
    
      <category term="寄蜉蝣于天地,渺沧海之一粟" scheme="https://double1000.github.io/blog/categories/%E5%AF%84%E8%9C%89%E8%9D%A3%E4%BA%8E%E5%A4%A9%E5%9C%B0-%E6%B8%BA%E6%B2%A7%E6%B5%B7%E4%B9%8B%E4%B8%80%E7%B2%9F/"/>
    
    
      <category term="JavaScript" scheme="https://double1000.github.io/blog/tags/JavaScript/"/>
    
      <category term="Notes" scheme="https://double1000.github.io/blog/tags/Notes/"/>
    
      <category term="字符串" scheme="https://double1000.github.io/blog/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes | 函数</title>
    <link href="https://double1000.github.io/blog/2017/04/06/javascript-notes-%E5%87%BD%E6%95%B0/"/>
    <id>https://double1000.github.io/blog/2017/04/06/javascript-notes-函数/</id>
    <published>2017-04-06T03:23:02.000Z</published>
    <updated>2017-04-06T03:33:59.135Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" class="full-image"></p>
<h4 id="一-函数定义"><a href="#一-函数定义" class="headerlink" title="一.函数定义"></a>一.函数定义</h4><ul>
<li>函数是一段代码,它只定义一次，但可以被执行或调用多次</li>
<li>函数即对象,每个函数都是Function构造函数的实例,因此函数名实际上也是一个指向函数对象的指针,不会与某个函数绑定</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">写法一:函数声明(推荐)</div><div class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">(形参)</span><span class="comment">&#123;</span></span></div><div class="line">    函数体;</div><div class="line">    返回值;</div><div class="line">&#125;</div><div class="line">写法二:函数表达式(推荐)</div><div class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span><span class="params">(形参)</span><span class="comment">&#123;</span></span></div><div class="line">    函数体;</div><div class="line">    返回值;</div><div class="line">&#125;</div><div class="line">写法三:<span class="function"><span class="keyword">Function</span>构造函数<span class="params">(不推荐)</span></span></div><div class="line"><span class="title">var</span> 函数名 = <span class="title">new</span> <span class="title">Function</span><span class="params">(形参,返回值)</span>;</div></pre></td></tr></table></figure>
<h4 id="二-函数特性"><a href="#二-函数特性" class="headerlink" title="二.函数特性"></a>二.函数特性</h4><ol>
<li>由于函数名仅仅是指向函数的指针,因此函数名与包含对象指针的其他变量没有声什么不同,换句话说。一个函数可能会有多个名字</li>
<li>函数没有重载,后声明的函数会覆盖前面的函数</li>
<li>作为值的函数</li>
</ol>
<h4 id="三-函数声明与函数表达式"><a href="#三-函数声明与函数表达式" class="headerlink" title="三.函数声明与函数表达式"></a>三.函数声明与函数表达式</h4><ol>
<li>解析器在向执行环境中加载数据时对[函数声明][函数表达式]不一样.</li>
<li>解析器会率先读取<strong>函数声明</strong>,并让其在执行代码之前可用</li>
<li>解析器对于<strong>函数表达式</strong>则必须等到执行到它所在的代码行,才会真正被解释执行</li>
</ol>
<h4 id="四-arguments和this"><a href="#四-arguments和this" class="headerlink" title="四.arguments和this"></a>四.arguments和this</h4><ul>
<li>函数的内部有两个特殊对象<code>arguments</code>和<code>this</code></li>
<li>其中<code>arguments</code>是一个类数组对象,包含传入函数中的所有参数(形参)<blockquote>
<p>Array.prototype.slice.call(argumets) / [].slice.call(arguments);</p>
</blockquote>
</li>
<li><p><code>arguments</code>对象下面有一个<code>callee</code>的属性,该属性是一个指针,指向拥有这个<code>arguments</code>对象的函数</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">经典的阶乘函数</div><div class="line">function factorial(<span class="built_in">num</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">num</span> &lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span>*arguments.callee(<span class="built_in">num</span><span class="number">-1</span>); <span class="comment">//消除耦合</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>this</code>引用的是函数据以执行的环境对象</p>
</li>
</ul>
<h4 id="五-函数的属性"><a href="#五-函数的属性" class="headerlink" title="五.函数的属性"></a>五.函数的属性</h4><ol>
<li>每个函数都包含两个属性<code>length</code>和<code>prototype</code></li>
<li><p><code>length</code>属性表示函数希望接受的<strong>命名参数的个数</strong></p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(num1,num2)</span>&#123;</span></div><div class="line">    <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;;</div><div class="line">console.<span class="built_in">log</span>(sum.<span class="built_in">length</span>) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>prototype</code>对于js的引用类型,<code>prototype</code>是它们所有实例方法的真正所在,诸如<code>toString()</code>,<code>valueOf()</code>都保存在prototype名下,只不过是通过各自对象的实例访问罢了,在创建<code>自定义引用类型</code>以及实现<code>继承</code>是很重要的。<code>prototype</code>属性是不可枚举的,因此使用<code>for-in</code>无法发现</p>
</li>
</ol>
<h4 id="六-函数的方法"><a href="#六-函数的方法" class="headerlink" title="六.函数的方法"></a>六.函数的方法</h4><ol>
<li>每个函数都包含<strong>非继承</strong>而来的方法:<code>apply()</code>,<code>call()</code>这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内<code>this</code>对象的值.</li>
<li><p><code>apply()</code>方法接受两个参数,一个是<code>在其运行函数中的作用域</code>,另一个是<code>参数数组||Array实例||arguments对象</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>.arguments);<span class="comment">//传入arguments对象</span></div><div class="line">&#125;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>.[num1,num2]);<span class="comment">//传入数组</span></div><div class="line"> &#125;</div><div class="line"> <span class="built_in">console</span>.log(callSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//  20</span></div><div class="line"> <span class="built_in">console</span>.log(callSum2(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">// 20</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>call()</code>方法跟<code>apply()</code>作用相同,第一个<code>this</code>值没变化,其余的参数都必须<code>直接传递给函数</code>传递给函数的参数必须逐个列举出来</p>
</li>
<li>事实上,传递参数并非<code>call()</code>方法跟<code>apply()</code>真正的用武之地;它们真正强大的地方是<code>能够扩充函数赖以运行的作用域</code></li>
</ol>
<h4 id="七-函数返回值-return"><a href="#七-函数返回值-return" class="headerlink" title="七.函数返回值 return"></a>七.函数返回值 return</h4><ol>
<li><code>return</code>就是<code>函数返回值</code>,作用把东西返回到函数外面来,在哪儿调用就返回到哪</li>
<li>函数<code>不仅可以返回数字,返回字符串,返回算式</code></li>
<li>函数参数,一次可以写多个进去,但是return返回值只能返回一个出去</li>
<li>函数可以没有return,结果:<code>undefined</code></li>
<li>函数返回值(函数可以把一些东西传到外面来)和函数传参(把一些东西传到函数里边去)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;1.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;一-函数定义&quot;&gt;&lt;a href=&quot;#一-函数定义&quot; class=&quot;headerlink&quot; title=&quot;一.函数定义&quot;&gt;&lt;/a&gt;一.函数定义&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;函数是一
    
    </summary>
    
      <category term="寄蜉蝣于天地,渺沧海之一粟" scheme="https://double1000.github.io/blog/categories/%E5%AF%84%E8%9C%89%E8%9D%A3%E4%BA%8E%E5%A4%A9%E5%9C%B0-%E6%B8%BA%E6%B2%A7%E6%B5%B7%E4%B9%8B%E4%B8%80%E7%B2%9F/"/>
    
    
      <category term="JavaScript" scheme="https://double1000.github.io/blog/tags/JavaScript/"/>
    
      <category term="Notes" scheme="https://double1000.github.io/blog/tags/Notes/"/>
    
      <category term="函数" scheme="https://double1000.github.io/blog/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes | 数组</title>
    <link href="https://double1000.github.io/blog/2017/04/06/javascript-notes-%E6%95%B0%E7%BB%84/"/>
    <id>https://double1000.github.io/blog/2017/04/06/javascript-notes-数组/</id>
    <published>2017-04-05T16:00:34.000Z</published>
    <updated>2017-04-06T03:01:29.242Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.png" class="full-image"></p>
<ul>
<li>数组：相同数据类型按照一定顺序排列的集合</li>
<li>稀疏数组：所谓稀疏数组就是数组中大部分的内容值都未被使用(或为零),在数组中仅有少部分的空间使用</li>
<li>二维数组：二维数组本质上是以数组作为数组元素的数组，即“数组的数组”。</li>
<li>多维数组：二维数组以上的数组。既非线性也非平面的数组。</li>
<li>栈：栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照<code>先进后出</code>的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。插入一般称为进栈（PUSH），删除则称为退栈（POP）。栈也称为后进先出表。</li>
<li>堆：一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。在队列中，调度程序反复提取队列中第一个作业并运行，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，但具有重要性的作业，同样应当具有优先权。堆即为解决此类问题设计的一种数据结构。</li>
<li>队列：是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</li>
<li>类数组：<code>拥有length属性</code>和<code>对应非负整数属性</code>的对象叫做<code>类数组</code></li>
</ul>
<h4 id="一-声明数组的方式"><a href="#一-声明数组的方式" class="headerlink" title="一.声明数组的方式"></a>一.声明数组的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--空的数组--&gt;</div><div class="line">var colors = new Array()</div><div class="line">&lt;!--数组长度为3--&gt;</div><div class="line">var colors = new Array(3)</div><div class="line">&lt;!--长度为2,两个项--&gt;</div><div class="line">var colors = new Array(&apos;red&apos;,&apos;blue&apos;)</div><div class="line">&lt;!--字面量方式--&gt;</div><div class="line">var colors = [&apos;red&apos;,&apos;blue&apos;,&apos;yellow&apos;];</div></pre></td></tr></table></figure>
<h4 id="二-数组的属性-基本方法"><a href="#二-数组的属性-基本方法" class="headerlink" title="二.数组的属性/基本方法"></a>二.数组的属性/基本方法</h4><ul>
<li>Array.length 数组的length,不是只读的,可以用来增删数组</li>
<li>Array.toString(),Array.toLocaleString(),Array.toValueOf();将数组转换成一个字符串</li>
<li>Array.concat(),连接数组。</li>
<li>Array.reverse(),数组反序。</li>
<li>Array.sort(),数组排序。</li>
<li>Array.join(),将数组元素连接起来以构建一个<code>字符串</code>跟<code>split</code>相反,不会更改原数组</li>
</ul>
<h4 id="三-数组相关操作"><a href="#三-数组相关操作" class="headerlink" title="三.数组相关操作"></a>三.数组相关操作</h4><ol>
<li><p>数组位置操作</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array.indexof(search,<span class="keyword">start</span>);search参数表示搜索的项，<span class="keyword">start</span>表示搜索的位置。从左至右</div><div class="line">Array.lastIndexOf(<span class="keyword">search</span>,<span class="keyword">start</span>)从右到左</div></pre></td></tr></table></figure>
</li>
<li><p>数组slice()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var colors = [&apos;red&apos;,&apos;blue&apos;,&apos;yellow&apos;,&apos;white&apos;,&apos;black&apos;];</div><div class="line">1.Array.slice(start,end) 返回一个新数组，不会改变原来的的数组</div><div class="line">2.从start处截取end个字符长度(包含start不包含end)</div><div class="line">3.如果是负数,它声明从数组尾部开始算起的位置。也就是说,-1指最后一个元素,-2指倒数第二个元素</div><div class="line">例子：var color2 = colors.slice(1,3);//[&apos;blue&apos;,&apos;yellow&apos;];</div></pre></td></tr></table></figure>
</li>
<li><p>数组的splice()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Array.splice(start, deleteCount, value, ...)</div><div class="line">原数组var arr = [1,2,3,4,5,6,7,8]</div><div class="line">注意:这个方法会修改原数组</div><div class="line">1.start 开始插入和(或)删除的数组元素的下标。</div><div class="line">2.deleteCount 从start开始，包括start所指的元素在内要删除的元素个数，</div><div class="line">3.如果没有指定它，如果没有指定它。splice()将删除从start开始到原数组结尾的所有元素</div><div class="line">4.value  要插入数组的零个或多个值，从start所指的小标处开始插入</div><div class="line">一个删除表示删除 var arrb = arr.splice(4) 返回b[5,6,7,8] a变成[1,2,3,4]</div><div class="line">两个值表示从start开始删除end个, var arrc = arr.splice(1,2) arrc返回[2,3] arr 返回 [1,4,6,7,8]</div><div class="line">两个值以上指定位置插入，var arrd = arr.splice(1,0,2,3)    arrb返回[] arr返回[1,2,3,2,3,4,5,6,7,8]</div></pre></td></tr></table></figure>
</li>
<li><p>栈和队列方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">栈方法:操作数组最后的元素</div><div class="line">Array.push(),方法从数组尾部添加（都会改变原数组,都返回数组的新length长度值)</div><div class="line">Array.pop(),方法从数组尾部删除</div><div class="line">队列方法:操作数组头部首元素</div><div class="line">Array.unshift(),方法是从数组的头部添加</div><div class="line">Array.shift(),方法shift()将把array的第—个元素移出数组，返回那个元素的值</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="四-数组函数"><a href="#四-数组函数" class="headerlink" title="四.数组函数"></a>四.数组函数</h4><ol>
<li><p>数组归并方法：reduce(化简函数,初值),reduceRight(化简函数,初值);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">返回值:是一个单数组，与传入初值的类型相同</div><div class="line">化简函数(initValue,nextValue[,index][,array]);</div><div class="line">1. initValue 初始变量,默认为数组的第一个元素，函数第一次执行后的返回值作为函数第二次执行的初始变量</div><div class="line">2. nextValue 当前变量，如果指定了第二个参数，则该变量为数组的第一个元素的值</div><div class="line">3. index 当前变量对应元素在数组中的索引(从0开始);</div><div class="line">4. array 原数组对象</div><div class="line">-  reduce()从左到右,reduceRight()从右到左</div></pre></td></tr></table></figure>
</li>
<li><p>数组迭代方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 数组定义了5个迭代方法,map,forEach,filter,some,every</div><div class="line">2. 每个方法接受两个参数,要在每一项上运行的函数和运行该函数的作用域对象(可选的) -- 影响this的值</div><div class="line">3. 运行的函数项会接受三个参数(数组项中的值,该项在数组中的位置,数组对象);</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Array.prototype.map();</div><div class="line">var users = [</div><div class="line">    &#123;name:&apos;t1&apos;,email:&apos;t1@qq.com&apos;&#125;,</div><div class="line">    &#123;name:&apos;t2&apos;,email:&apos;t2@qq.com&apos;&#125;,</div><div class="line">    &#123;name:&apos;t3&apos;,email:&apos;t3@qq.com&apos;&#125;</div><div class="line">];</div><div class="line">1. 返回值:数组,方法对数组的每一项给定函数,返回每次函数调用结果组成的数组</div><div class="line">2. 语法糖:map()方法还可以用于类数组对象</div><div class="line">3. 注意:对于稀疏数组,map()方法不会实际上不存在的元素序号上调用函数</div><div class="line"></div><div class="line">例子：语法糖类数组</div><div class="line">Array.prototype.map.call(&apos;abc&apos;,function(item,index,arr)&#123;</div><div class="line">    return item.toUpperCase(); // [A,B,C]</div><div class="line">&#125;);</div><div class="line"></div><div class="line">例子:获取方法对象数组中的特定属性值</div><div class="line">var arr2 = user.map(function(item,index,arr)&#123;</div><div class="line">    return item.email;</div><div class="line">&#125;);</div><div class="line">// 返回 [&quot;t1@qq.com&quot;,&quot;t2@qq.com&quot;,&quot;t3@qq.com&quot;];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Array.prototype.forEach();</div><div class="line">1. 没有返回值,本质上跟for循环没有什么不同,如果需要返回值,一般使用map方法</div><div class="line">2. forEach()方法除了接受一个必须回掉函数参数,第二个参数还可以接受一个可选的上下文参数(改变回调函数this指向);</div><div class="line">3. [注意:] 对于稀疏数组,forEach()方法不会再实际上不存在元素序号上调用函数</div><div class="line">4. [注意:] forEach()方法无法在所有元素都传递给调用的函数之前终止遍历,也就是说,没有像for循环中使用相应的break语句,如果提前终止,必须把forEach()方法放在一个try块中,并能抛出异常</div><div class="line"></div><div class="line">例子:改变函数的上下文</div><div class="line">var out = [];</div><div class="line">[1,2,3].forEach(function(elem)&#123;</div><div class="line">    this.push(elem*elem);</div><div class="line">&#125;,out);</div><div class="line">console.log(out); [1,4,9];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Array.prototype.filter();</div><div class="line">1. 返回值:数组,返回给定条件为true的项组成的数组.</div><div class="line">2. 该方法常用于查询符合条件的所有数组项。</div><div class="line">3. 注意:filter()会跳过稀疏数组中缺少的元素,它返回的数组总是稠密的，所以可以用来压缩稀疏数组的空缺</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Array.prototype.some();</div><div class="line">Array.prototype.every();</div><div class="line">1. 返回值。Boolean</div><div class="line">2. some():对数组中的每一项运行给定函数,如果该函数对数组中任意一项返回true,则返回true,否则返回false</div><div class="line">3. every():对数组中的每一项运行给定函数,数组中全部项返回true,则返回true,否则false</div></pre></td></tr></table></figure>
<h4 id="五-检测数组的方法"><a href="#五-检测数组的方法" class="headerlink" title="五.检测数组的方法"></a>五.检测数组的方法</h4> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var arr</span> = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</div></pre></td></tr></table></figure>
<ol>
<li>console.log(typeof arr); // Object<ul>
<li><code>数组的本质是一种特殊的对象</code>所以返回<code>object</code>,<code>typeof</code>运算符只能用来区分<code>原始类型</code>和<code>对象类型</code>,对于<code>更具体的对象类型是无法鉴别的</code></li>
</ul>
</li>
<li>console.log(arr instanceof Array);// true</li>
</ol>
<ul>
<li><code>instanceof</code>运算符用来判断一个<code>对象是否特定构造函数的实例</code>,如果网页中包含多个框架</li>
</ul>
<ol>
<li>console.log(arr instaceof Object);// true</li>
<li>console.log(Array.isArray(arr));// true</li>
</ol>
<ul>
<li>为了数组检测方便,ES新增了<code>Array.isArray()</code>方法,该方法的目的地是最终确定某个值到底是不是<code>数组</code>,而不管它在那个全局环境中创建的</li>
</ul>
<ol>
<li>console.log(Object.prototype.toString.call(arr) === ‘[Object Array]’;</li>
<li>console.log(Object.prototype.toString.call(arr).slice(8,-1).toLowerCase === ‘array’;</li>
</ol>
<ul>
<li>通过引用<code>Object的toString()</code>方法来检查对象的类属性.</li>
</ul>
<h4 id="六-类数组"><a href="#六-类数组" class="headerlink" title="六.类数组"></a>六.类数组</h4><blockquote>
<p>拥有length属性和对应非负整数属性的对象叫做类数组<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">三类常见的类数组对象。</div><div class="line"><span class="number">1.</span>arguments对象</div><div class="line"><span class="number">2.</span>DOM方法(如document.getElementsByTagName()方法)返回的对象</div><div class="line"><span class="number">3.</span>字符串</div><div class="line">注意:字符串是不可变值，故当把它们作为数组看待时，它们是只读的。如push()、sort()、reverse()、splice()等数组方法会修改数组，它们在字符串上是无效的，且会报错</div><div class="line">数组的slice()方法将类数组对象变成真正的数组</div><div class="line">var arr = Array.prototype.slice.<span class="keyword">call</span>(arrayLike);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="七-参考来源"><a href="#七-参考来源" class="headerlink" title="七.参考来源"></a>七.参考来源</h4><p><a href="http://www.cnblogs.com/xiaohuochai/p/5682621.html" target="_blank" rel="external">小火柴的蓝色理想：数组的22种方法</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">MDN JavaScript标准库Array</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;1.png&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组：相同数据类型按照一定顺序排列的集合&lt;/li&gt;
&lt;li&gt;稀疏数组：所谓稀疏数组就是数组中大部分的内容值都未被使用(或为零),在数组中仅有少部分的空间使用&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="寄蜉蝣于天地,渺沧海之一粟" scheme="https://double1000.github.io/blog/categories/%E5%AF%84%E8%9C%89%E8%9D%A3%E4%BA%8E%E5%A4%A9%E5%9C%B0-%E6%B8%BA%E6%B2%A7%E6%B5%B7%E4%B9%8B%E4%B8%80%E7%B2%9F/"/>
    
    
      <category term="JavaScript" scheme="https://double1000.github.io/blog/tags/JavaScript/"/>
    
      <category term="Notes" scheme="https://double1000.github.io/blog/tags/Notes/"/>
    
      <category term="数组" scheme="https://double1000.github.io/blog/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>情书 | 王小波，爱你就像爱生命。</title>
    <link href="https://double1000.github.io/blog/2017/04/04/%E6%83%85%E4%B9%A6-%E7%8E%8B%E5%B0%8F%E6%B3%A2%EF%BC%8C%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/"/>
    <id>https://double1000.github.io/blog/2017/04/04/情书-王小波，爱你就像爱生命/</id>
    <published>2017-04-04T15:38:05.000Z</published>
    <updated>2017-04-06T06:31:14.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“我是爱你的，看见就爱上了。我爱你爱到不自私的地步。就像一个人手里一只鸽子飞走了，他从心里祝福那鸽子的飞翔。你也飞吧。我会难过，也会高兴，到底会怎么 样我也不知道。”“静下来想你，觉得一切都美好得不可思议，以前我不知道爱情这么美好。爱到深处这么美好。真不想让任何人来管我们。谁也管不着，和谁都无关。告诉你，一想到你，我这张丑脸就泛起微笑”</p>
</blockquote>
<hr>
<blockquote class="blockquote-center"><p>我把我整个灵魂都给你，连同它的怪癖，耍小脾气，忽明忽暗，一千八百种坏毛病。它真讨厌，只有一点好，爱你。</p>
</blockquote>
<hr>
<blockquote class="blockquote-center"><p>当我跨过沉沦的一切，向着永恒开战的时候，你是我的军旗。</p>
</blockquote>
<hr>
<blockquote class="blockquote-center"><p>我很讨厌我自己不温不凉的思虑过度，也许我是个坏人，不过我只要你吻我一下就会变好呢。</p>
</blockquote>
<hr>
<blockquote class="blockquote-center"><p>我的灵魂里是有很多地方玩世不恭 ，对人傲慢无礼，但是它是有一个核心的，这个核心害怕黑暗，柔弱得像是绵羊一样。只有顶平等的友爱才能使他得到安慰。你对我是属于这个核心的。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“我是爱你的，看见就爱上了。我爱你爱到不自私的地步。就像一个人手里一只鸽子飞走了，他从心里祝福那鸽子的飞翔。你也飞吧。我会难过，也会高兴，到底会怎么 样我也不知道。”“静下来想你，觉得一切都美好得不
    
    </summary>
    
      <category term="哀吾生之须臾,羡长江之无穷" scheme="https://double1000.github.io/blog/categories/%E5%93%80%E5%90%BE%E7%94%9F%E4%B9%8B%E9%A1%BB%E8%87%BE-%E7%BE%A1%E9%95%BF%E6%B1%9F%E4%B9%8B%E6%97%A0%E7%A9%B7/"/>
    
    
      <category term="王小波" scheme="https://double1000.github.io/blog/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
      <category term="附庸风雅" scheme="https://double1000.github.io/blog/tags/%E9%99%84%E5%BA%B8%E9%A3%8E%E9%9B%85/"/>
    
      <category term="情书" scheme="https://double1000.github.io/blog/tags/%E6%83%85%E4%B9%A6/"/>
    
      <category term="语录" scheme="https://double1000.github.io/blog/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
</feed>
